(()=>{"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t=function(){function t(e,n){var r=e.items,o=e.render;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._items=r,this._renderer=o,this._container=document.querySelector(n)}var n,r;return n=t,(r=[{key:"renderItems",value:function(){var e=this;this._items.forEach((function(t){e._renderer(t)}))}},{key:"renderOneItem",value:function(e){this._renderer(e)}},{key:"addItem",value:function(e){this._container.prepend(e)}}])&&e(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),t}();function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var r=function(){function e(t,n){var r=t.data,o=t.handleCardClick,i=t.handleLikeClick,u=t.handleDeleteButtonClick;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._data=r,this._title=this._data.name,this._link=this._data.link,this._likes=this._data.likes.length,this._id=this._data._id,this._ownerId=this._data.owner._id,this._alt=this._title,this._handleCardClick=o,this._handleLikeClick=i,this._handleDeleteButtonClick=u,this._cardSelector=n}var t,r;return t=e,(r=[{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".place").cloneNode(!0)}},{key:"_checkCard",value:function(e){e&&this._deleteButton.remove()}},{key:"_checkLike",value:function(e){e&&this.putLike()}},{key:"generateCard",value:function(e){this._element=this._getTemplate(),this._likeButton=this._element.querySelector(".place__like-button"),this._deleteButton=this._element.querySelector(".place__delete-button"),this._enlargeButton=this._element.querySelector(".place__enlarge-button"),this._cardLikes=this._element.querySelector(".place__like-counter");var t=this._element.querySelector(".place__title"),n=this._element.querySelector(".place__image");return t.textContent=this._title,n.src=this._link,n.alt=this._alt,this._cardLikes.textContent=this._likes,this._setEventListeners(),this._checkCard(e.isNotUserCard),this._checkLike(e.isLikedByUser),this._element}},{key:"_setEventListeners",value:function(){var e=this;this._likeButton.addEventListener("click",(function(){e._handleLikeClick()})),this._deleteButton&&this._deleteButton.addEventListener("click",(function(){e._handleDeleteButtonClick()})),this._enlargeButton.addEventListener("click",(function(){e._handleCardClick()}))}},{key:"deleteCard",value:function(){this._element.remove(),this._element=null}},{key:"putLike",value:function(){this._likeButton.classList.add("place__like-button_active")}},{key:"deleteLike",value:function(){this._likeButton.classList.remove("place__like-button_active")}},{key:"updateÐ¡ounter",value:function(e){this._cardLikes.textContent=e}}])&&n(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popupSelector=t,this._popup=document.querySelector(this._popupSelector),this._openPopupSelector="popup_opened",this._handleEscClose=this._handleEscClose.bind(this)}var t,n;return t=e,(n=[{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"open",value:function(){document.addEventListener("keydown",this._handleEscClose),this._popup.classList.add(this._openPopupSelector)}},{key:"close",value:function(){document.removeEventListener("keydown",this._handleEscClose),this._popup.classList.remove(this._openPopupSelector)}},{key:"_handleClickClose",value:function(e){(e.target===e.currentTarget||e.target.classList.contains("popup__close-button"))&&this.close()}},{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("click",(function(t){e._handleClickClose(t)}))}}])&&o(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function u(e){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},u(e)}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(){return c="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=l(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},c.apply(this,arguments)}function l(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=p(e)););return e}function s(e,t){return s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},s(e,t)}function f(e,t){if(t&&("object"===u(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function p(e){return p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},p(e)}var h=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&s(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=p(r);if(o){var n=p(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return f(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e))._popupImage=t._popup.querySelector(".popup__image"),t._popupImageCaption=t._popup.querySelector(".popup__image-caption"),t}return t=u,(n=[{key:"open",value:function(e){this._popupImageCaption.textContent=e.name,this._popupImage.src=e.link,this._popupImage.alt=this._popupImageCaption.textContent,c(p(u.prototype),"open",this).call(this)}}])&&a(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(i);function d(e){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},d(e)}function _(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function y(){return y="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=v(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},y.apply(this,arguments)}function v(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=k(e)););return e}function b(e,t){return b=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},b(e,t)}function m(e,t){if(t&&("object"===d(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function k(e){return k=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},k(e)}var g=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&b(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=k(r);if(o){var n=k(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return m(this,e)});function u(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,e))._handleSubmitForm=t,n._formElement=n._popup.querySelector(".popup__form"),n._inputList=n._formElement.querySelectorAll(".popup__input"),n._submitButtonElement=n._popup.querySelector(".popup__submit-button"),n}return t=u,(n=[{key:"close",value:function(){y(k(u.prototype),"close",this).call(this),this._formElement.reset()}},{key:"_getInputValues",value:function(){var e=this;return this._formValues={},this._inputList.forEach((function(t){e._formValues[t.name]=t.value})),this._formValues}},{key:"setEventListeners",value:function(){var e=this;y(k(u.prototype),"setEventListeners",this).call(this),this._formElement.addEventListener("submit",(function(t){t.preventDefault(),e._handleSubmitForm(e._getInputValues())}))}},{key:"getPopupForm",value:function(){return this._formElement}},{key:"setInputValues",value:function(e){this._inputList.forEach((function(t){t.value=e[t.name]}))}},{key:"getSubmitButton",value:function(){return this._submitButtonElement}}])&&_(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(i);function E(e){return E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},E(e)}function S(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function w(){return w="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=C(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},w.apply(this,arguments)}function C(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=P(e)););return e}function O(e,t){return O=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},O(e,t)}function L(e,t){if(t&&("object"===E(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return j(e)}function j(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function P(e){return P=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},P(e)}var B=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&O(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=P(r);if(o){var n=P(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return L(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e))._handleClickSubmit={},t._submitButtonElement=t._popup.querySelector(".popup__submit-button"),t._handleEnterSubmit=t._handleEnterSubmit.bind(j(t)),t}return t=u,(n=[{key:"setHandler",value:function(e){this._handleClickSubmit=e}},{key:"_handleEnterSubmit",value:function(e){"Enter"===e.key&&this._handleClickSubmit()}},{key:"open",value:function(){w(P(u.prototype),"open",this).call(this),document.addEventListener("keydown",this._handleEnterSubmit)}},{key:"close",value:function(){w(P(u.prototype),"close",this).call(this),document.removeEventListener("keydown",this._handleEnterSubmit)}},{key:"setEventListeners",value:function(){var e=this;w(P(u.prototype),"setEventListeners",this).call(this),this._submitButtonElement.addEventListener("click",(function(){e._handleClickSubmit()}))}},{key:"getSubmitButton",value:function(){return this._submitButtonElement}}])&&S(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(i);function I(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var R=function(){function e(t){var n=t.nameSelector,r=t.aboutSelector,o=t.avatarSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=document.querySelector(n),this._about=document.querySelector(r),this._avatar=document.querySelector(o)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._name.textContent,about:this._about.textContent,avatar:this._avatar.src}}},{key:"setUserInfo",value:function(e){this._name.textContent=e.name,this._about.textContent=e.about,this._avatar.src=e.avatar}}])&&I(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function T(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var q=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._inputSelector=t.inputSelector,this._inputErrorClass=t.inputErrorClass,this._errorSelector=t.errorSelector,this._errorClass=t.errorClass,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._formElement=n,this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector)}var t,n;return t=e,(n=[{key:"enableValidation",value:function(){this._setEventListeners()}},{key:"_setEventListeners",value:function(){var e=this;this._inputList.forEach((function(t){t.addEventListener("input",(function(){e._isValid(t),e._toggleButtonState()}))}))}},{key:"_isValid",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}},{key:"_showInputError",value:function(e,t){var n=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),n.textContent=t,n.classList.add(this._errorClass)}},{key:"_hideInputError",value:function(e){var t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}},{key:"_toggleButtonState",value:function(){this._hasInvalidInput()?this._disableButton():this._enableButton()}},{key:"_hasInvalidInput",value:function(){return this._inputList.some((function(e){return!e.validity.valid}))}},{key:"_disableButton",value:function(){this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.setAttribute("disabled",!0)}},{key:"_enableButton",value:function(){this._buttonElement.removeAttribute("disabled"),this._buttonElement.classList.remove(this._inactiveButtonClass)}},{key:"resetValidation",value:function(){var e=this;this._toggleButtonState(),this._inputList.forEach((function(t){e._hideInputError(t)}))}}])&&T(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function A(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var x=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._url=t.baseUrl,this._headers=t.headers}var t,n;return t=e,(n=[{key:"_handleResponse",value:function(e,t){return e.ok?e.json():Promise.reject(t)}},{key:"getUserInfo",value:function(){var e=this;return fetch("".concat(this._url,"/users/me"),{method:"GET",headers:this._headers}).then((function(t){return e._handleResponse(t,"ÐÐ°Ð½Ð½ÑÐµ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ Ð½Ðµ Ð¿Ð¾Ð»ÑÑÐµÐ½Ñ")}))}},{key:"getInitialCards",value:function(){var e=this;return fetch("".concat(this._url,"/cards"),{method:"GET",headers:this._headers}).then((function(t){return e._handleResponse(t,"Ð¡Ð¿Ð¸ÑÐ¾Ðº ÐºÐ°ÑÑÐ¾ÑÐµÐº Ð½Ðµ Ð¿Ð¾Ð»ÑÑÐµÐ½")}))}},{key:"getInitialData",value:function(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}},{key:"editUserInfo",value:function(e){var t=this;return fetch("".concat(this._url,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then((function(e){return t._handleResponse(e,"ÐÐ°Ð½Ð½ÑÐµ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ Ð½Ðµ Ð¸Ð·Ð¼ÐµÐ½ÐµÐ½Ñ")}))}},{key:"addNewCard",value:function(e){var t=this;return fetch("".concat(this._url,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify(e)}).then((function(e){return t._handleResponse(e,"ÐÐ°ÑÑÐ¾ÑÐºÐ° Ð½Ðµ Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð°")}))}},{key:"deleteCard",value:function(e){var t=this;return fetch("".concat(this._url,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then((function(e){return t._handleResponse(e,"ÐÐ°ÑÑÐ¾ÑÐºÐ° Ð½Ðµ ÑÐ´Ð°Ð»ÐµÐ½Ð°")}))}},{key:"putLike",value:function(e){var t=this;return fetch("".concat(this._url,"/cards/").concat(e,"/likes"),{method:"PUT",headers:this._headers}).then((function(e){return t._handleResponse(e,"ÐÐ°Ð¹Ðº Ð½Ðµ Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½")}))}},{key:"deleteLike",value:function(e){var t=this;return fetch("".concat(this._url,"/cards/").concat(e,"/likes"),{method:"DELETE",headers:this._headers}).then((function(e){return t._handleResponse(e,"ÐÐ°Ð¹Ðº Ð½Ðµ ÑÐ±ÑÐ°Ð½")}))}},{key:"updateAvatar",value:function(e){var t=this;return fetch("".concat(this._url,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then((function(e){return t._handleResponse(e,"ÐÐ²Ð°ÑÐ°Ñ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ Ð½Ðµ Ð¸Ð·Ð¼ÐµÐ½ÐµÐ½")}))}}])&&A(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function U(e){return e.getSubmitButton().textContent}function D(e,t,n,r){t.getSubmitButton().textContent=e?r:n}var V=document.querySelector(".profile"),N=V.querySelector(".profile__edit-button"),H=V.querySelector(".profile__add-button"),F=V.querySelector(".profile__update-button"),J={inputSelector:".popup__input",inputErrorClass:"popup__input_type_error",errorSelector:".popup__error",errorClass:"popup__error_active",submitButtonSelector:".popup__submit-button",inactiveButtonClass:"popup__submit-button_disabled"},G={},M=Array.from(document.forms),z="Ð¡Ð¾ÑÑÐ°Ð½ÐµÐ½Ð¸Ðµ...",$="Ð£Ð´Ð°Ð»ÐµÐ½Ð¸Ðµ...";function K(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Q=new h(".popup_type_enlarge");Q.setEventListeners();var W=new B(".popup_type_submit");W.setEventListeners();var X=new R({nameSelector:".profile__name",aboutSelector:".profile__about",avatarSelector:".profile__photo"}),Y=new x({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-41",headers:{authorization:"b6bde9be-8674-4eca-8179-302e0a4e2b6f","Content-Type":"application/json"}});Y.getInitialData().then((function(e){var n,o,i=(o=2,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],u=!0,a=!1;try{for(n=n.call(e);!(u=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);u=!0);}catch(e){a=!0,o=e}finally{try{u||null==n.return||n.return()}finally{if(a)throw o}}return i}}(n,o)||function(e,t){if(e){if("string"==typeof e)return K(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?K(e,t):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=i[0],a=i[1];function c(e){return e.likes.some((function(e){return e._id===u._id}))}X.setUserInfo(u);var l=new t({items:a.sort((function(e,t){return e.createdAt>t.createdAt?1:e.createdAt<t.createdAt?-1:0})),render:function(e){var t=e.owner._id!==u._id,n=c(e),o=function(e){var t=new r({data:e,handleCardClick:function(){Q.open(e)},handleLikeClick:function(){function n(n){t.updateÐ¡ounter(n.likes.length),e.likes=n.likes}c(e)?Y.deleteLike(e._id).then((function(e){t.deleteLike(),n(e)})).catch((function(e){return console.log("ÐÑÐ¸Ð±ÐºÐ°: ".concat(e))})):Y.putLike(e._id).then((function(e){t.putLike(),n(e)})).catch((function(e){return console.log("ÐÑÐ¸Ð±ÐºÐ°: ".concat(e))}))},handleDeleteButtonClick:function(){W.setHandler((function(){var n=U(W);D(!0,W,n,$),Y.deleteCard(e._id).then((function(){t.deleteCard(),W.close()})).catch((function(e){return console.log("ÐÑÐ¸Ð±ÐºÐ°: ".concat(e))})).finally((function(){D(!1,W,n,$)}))})),W.open()}},".place-template");return t}(e).generateCard({isNotUserCard:t,isLikedByUser:n});l.addItem(o)}},".places__list");return l.renderItems(),{userData:u,initialCardsData:a,cardList:l}})).then((function(e){return function(e){M.forEach((function(t){var n=new q(e,t),r=t.getAttribute("name");G[r]=n,n.enableValidation()}))}(J),e})).then((function(e){var t=new g(".popup_type_edit",(function(e){var n=U(t);D(!0,t,n,z),Y.editUserInfo(e).then((function(e){X.setUserInfo(e),t.close()})).catch((function(e){return console.log("ÐÑÐ¸Ð±ÐºÐ°: ".concat(e))})).finally((function(){D(!1,t,n,z)}))}));return t.setEventListeners(),N.addEventListener("click",(function(){t.setInputValues(X.getUserInfo()),G.edit.resetValidation(),t.open()})),e})).then((function(e){var t=new g(".popup_type_add",(function(n){var r=U(t);D(!0,t,r,z);var o={name:n.place,link:n.link};Y.addNewCard(o).then((function(n){e.cardList.renderOneItem(n),t.close()})).catch((function(e){return console.log("ÐÑÐ¸Ð±ÐºÐ°: ".concat(e))})).finally((function(){D(!1,t,r,z)}))}));return t.setEventListeners(),H.addEventListener("click",(function(){G.add.resetValidation(),t.open()})),e})).then((function(e){var t=new g(".popup_type_update-avatar",(function(e){var n=U(t);D(!0,t,n,z);var r={avatar:e["avatar-link"]};Y.updateAvatar(r).then((function(e){X.setUserInfo(e),t.close()})).catch((function(e){return console.log("ÐÑÐ¸Ð±ÐºÐ°: ".concat(e))})).finally((function(){D(!1,t,n,z)}))}));return t.setEventListeners(),F.addEventListener("click",(function(){G["update-avatar"].resetValidation(),t.open()})),e})).catch((function(e){return console.log("ÐÑÐ¸Ð±ÐºÐ°: ".concat(e))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUxyQyxXQUNFb0gsRUFBQUEsSUFBQUEsa0JBQ0ErQyxFQUFZeEIsVUFLUGUsS0FHUnpELE1BQUssU0FBQ3lELEdBR0wsSUFBTWEsRUFBc0IsSUFBSWxKLEVBQWMsNkJBQTZCLFNBQUMySSxHQUcxRSxJQUFNbEQsRUFBY0wsRUFBcUI4RCxHQUN6QzNELEdBQWlCLEVBQU0yRCxFQUFxQnpELEVBQWFTLEdBRXpELElBQU1oSyxFQUFPLENBQ1h1RixPQUFRa0gsRUFBWSxnQkFLdEJuQyxFQUNHMkMsYUFBYWpOLEdBQ2IwSSxNQUFLLFNBQUNsRCxHQUNMNkUsRUFBU1EsWUFBWXJGLEdBQ3JCd0gsRUFBb0IzSixXQUVyQm1JLE9BQU0sU0FBQ0MsR0FBRCxPQUFXQyxRQUFRQyxJQUFSLGtCQUF1QkYsT0FDeENLLFNBQVEsV0FDUHpDLEdBQWlCLEVBQU8yRCxFQUFxQnpELEVBQWFTLFNBZWhFLE9BWEFnRCxFQUFvQjdDLG9CQVNwQlAsRUFBd0JuSCxpQkFBaUIsU0FMekMsV0FDRW9ILEVBQWUsaUJBQWZBLGtCQUNBbUQsRUFBb0I1QixVQUtmZSxLQUdSWCxPQUFNLFNBQUNDLEdBQUQsT0FBV0MsUUFBUUMsSUFBUixrQkFBdUJGLFEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9zY3JpcHRzL2NvbXBvbmVudHMvU2VjdGlvbi5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9zY3JpcHRzL2NvbXBvbmVudHMvQ2FyZC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9zY3JpcHRzL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvc2NyaXB0cy9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL3NjcmlwdHMvY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL3NjcmlwdHMvY29tcG9uZW50cy9Qb3B1cFdpdGhDb25maXJtYXRpb24uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvc2NyaXB0cy9jb21wb25lbnRzL1VzZXJJbmZvLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL3NjcmlwdHMvY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL3NjcmlwdHMvY29tcG9uZW50cy9BcGkuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvc2NyaXB0cy91dGlscy91dGlscy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9zY3JpcHRzL3V0aWxzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9wYWdlcy9pbmRleC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBTZWN0aW9uIHtcclxuICBjb25zdHJ1Y3Rvcih7IGl0ZW1zLCByZW5kZXIgfSwgY29udGFpbmVyU2VsZWN0b3IpIHtcclxuICAgIHRoaXMuX2l0ZW1zID0gaXRlbXM7XHJcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcjtcclxuICAgIHRoaXMuX2NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29udGFpbmVyU2VsZWN0b3IpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVySXRlbXMoKSB7XHJcbiAgICB0aGlzLl9pdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICAgIHRoaXMuX3JlbmRlcmVyKGl0ZW0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICByZW5kZXJPbmVJdGVtKGl0ZW0pIHtcclxuICAgIHRoaXMuX3JlbmRlcmVyKGl0ZW0pO1xyXG4gIH1cclxuXHJcbiAgYWRkSXRlbShlbGVtZW50KSB7XHJcbiAgICB0aGlzLl9jb250YWluZXIucHJlcGVuZChlbGVtZW50KTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FyZCB7XHJcbiAgY29uc3RydWN0b3IoeyBkYXRhLCBoYW5kbGVDYXJkQ2xpY2ssIGhhbmRsZUxpa2VDbGljaywgaGFuZGxlRGVsZXRlQnV0dG9uQ2xpY2sgfSwgY2FyZFNlbGVjdG9yKSB7XHJcbiAgICB0aGlzLl9kYXRhID0gZGF0YTtcclxuICAgIHRoaXMuX3RpdGxlID0gdGhpcy5fZGF0YS5uYW1lO1xyXG4gICAgdGhpcy5fbGluayA9IHRoaXMuX2RhdGEubGluaztcclxuICAgIHRoaXMuX2xpa2VzID0gdGhpcy5fZGF0YS5saWtlcy5sZW5ndGg7XHJcbiAgICB0aGlzLl9pZCA9IHRoaXMuX2RhdGEuX2lkO1xyXG4gICAgdGhpcy5fb3duZXJJZCA9IHRoaXMuX2RhdGEub3duZXIuX2lkO1xyXG5cclxuICAgIHRoaXMuX2FsdCA9IHRoaXMuX3RpdGxlO1xyXG5cclxuICAgIHRoaXMuX2hhbmRsZUNhcmRDbGljayA9IGhhbmRsZUNhcmRDbGljaztcclxuICAgIHRoaXMuX2hhbmRsZUxpa2VDbGljayA9IGhhbmRsZUxpa2VDbGljaztcclxuICAgIHRoaXMuX2hhbmRsZURlbGV0ZUJ1dHRvbkNsaWNrID0gaGFuZGxlRGVsZXRlQnV0dG9uQ2xpY2s7XHJcbiAgICB0aGlzLl9jYXJkU2VsZWN0b3IgPSBjYXJkU2VsZWN0b3I7XHJcbiAgfVxyXG5cclxuICBfZ2V0VGVtcGxhdGUoKSB7XHJcbiAgICBjb25zdCBjYXJkRWxlbWVudCA9IGRvY3VtZW50XHJcbiAgICAgIC5xdWVyeVNlbGVjdG9yKHRoaXMuX2NhcmRTZWxlY3RvcilcclxuICAgICAgLmNvbnRlbnQucXVlcnlTZWxlY3RvcignLnBsYWNlJylcclxuICAgICAgLmNsb25lTm9kZSh0cnVlKTtcclxuXHJcbiAgICByZXR1cm4gY2FyZEVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICBfY2hlY2tDYXJkKGlzTm90VXNlckNhcmQpIHtcclxuICAgIGlmIChpc05vdFVzZXJDYXJkKSB7XHJcbiAgICAgIHRoaXMuX2RlbGV0ZUJ1dHRvbi5yZW1vdmUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9jaGVja0xpa2UoaXNMaWtlZEJ5VXNlcikge1xyXG4gICAgaWYgKGlzTGlrZWRCeVVzZXIpIHtcclxuICAgICAgdGhpcy5wdXRMaWtlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZW5lcmF0ZUNhcmQoY2hl0YFrcykge1xyXG4gICAgdGhpcy5fZWxlbWVudCA9IHRoaXMuX2dldFRlbXBsYXRlKCk7XHJcbiAgICB0aGlzLl9saWtlQnV0dG9uID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcucGxhY2VfX2xpa2UtYnV0dG9uJyk7XHJcbiAgICB0aGlzLl9kZWxldGVCdXR0b24gPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wbGFjZV9fZGVsZXRlLWJ1dHRvbicpO1xyXG4gICAgdGhpcy5fZW5sYXJnZUJ1dHRvbiA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLnBsYWNlX19lbmxhcmdlLWJ1dHRvbicpO1xyXG4gICAgdGhpcy5fY2FyZExpa2VzID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcucGxhY2VfX2xpa2UtY291bnRlcicpO1xyXG5cclxuICAgIGNvbnN0IGNhcmRUaXRsZSA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLnBsYWNlX190aXRsZScpO1xyXG4gICAgY29uc3QgY2FyZEltYWdlID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcucGxhY2VfX2ltYWdlJyk7XHJcblxyXG4gICAgY2FyZFRpdGxlLnRleHRDb250ZW50ID0gdGhpcy5fdGl0bGU7XHJcbiAgICBjYXJkSW1hZ2Uuc3JjID0gdGhpcy5fbGluaztcclxuICAgIGNhcmRJbWFnZS5hbHQgPSB0aGlzLl9hbHQ7XHJcblxyXG4gICAgdGhpcy5fY2FyZExpa2VzLnRleHRDb250ZW50ID0gdGhpcy5fbGlrZXM7XHJcblxyXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbiAgICB0aGlzLl9jaGVja0NhcmQoY2hl0YFrcy5pc05vdFVzZXJDYXJkKTtcclxuICAgIHRoaXMuX2NoZWNrTGlrZShjaGXRgWtzLmlzTGlrZWRCeVVzZXIpO1xyXG5cclxuICAgIHJldHVybiB0aGlzLl9lbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5fbGlrZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgdGhpcy5faGFuZGxlTGlrZUNsaWNrKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAodGhpcy5fZGVsZXRlQnV0dG9uKSB7XHJcbiAgICAgIHRoaXMuX2RlbGV0ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICB0aGlzLl9oYW5kbGVEZWxldGVCdXR0b25DbGljaygpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9lbmxhcmdlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICB0aGlzLl9oYW5kbGVDYXJkQ2xpY2soKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZGVsZXRlQ2FyZCgpIHtcclxuICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcclxuICB9XHJcblxyXG4gIHB1dExpa2UoKSB7XHJcbiAgICB0aGlzLl9saWtlQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3BsYWNlX19saWtlLWJ1dHRvbl9hY3RpdmUnKTtcclxuICB9XHJcblxyXG4gIGRlbGV0ZUxpa2UoKSB7XHJcbiAgICB0aGlzLl9saWtlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ3BsYWNlX19saWtlLWJ1dHRvbl9hY3RpdmUnKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZdChb3VudGVyKGxpa2VzKSB7XHJcbiAgICB0aGlzLl9jYXJkTGlrZXMudGV4dENvbnRlbnQgPSBsaWtlcztcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXAge1xuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XG4gICAgdGhpcy5fcG9wdXBTZWxlY3RvciA9IHBvcHVwU2VsZWN0b3I7XG4gICAgdGhpcy5fcG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuX3BvcHVwU2VsZWN0b3IpO1xuICAgIHRoaXMuX29wZW5Qb3B1cFNlbGVjdG9yID0gJ3BvcHVwX29wZW5lZCc7XG4gICAgdGhpcy5faGFuZGxlRXNjQ2xvc2UgPSB0aGlzLl9oYW5kbGVFc2NDbG9zZS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgX2hhbmRsZUVzY0Nsb3NlKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LmtleSA9PT0gJ0VzY2FwZScpIHtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG4gIH1cblxuICBvcGVuKCkge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XG4gICAgdGhpcy5fcG9wdXAuY2xhc3NMaXN0LmFkZCh0aGlzLl9vcGVuUG9wdXBTZWxlY3Rvcik7XG4gIH1cblxuICBjbG9zZSgpIHtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xuICAgIHRoaXMuX3BvcHVwLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fb3BlblBvcHVwU2VsZWN0b3IpO1xuICB9XG5cbiAgX2hhbmRsZUNsaWNrQ2xvc2UoZXZlbnQpIHtcbiAgICBpZiAoXG4gICAgICBldmVudC50YXJnZXQgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQgfHxcbiAgICAgIGV2ZW50LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3BvcHVwX19jbG9zZS1idXR0b24nKVxuICAgICkge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cbiAgfVxuXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMuX3BvcHVwLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICB0aGlzLl9oYW5kbGVDbGlja0Nsb3NlKGV2ZW50KTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IFBvcHVwIGZyb20gJy4vUG9wdXAuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoSW1hZ2UgZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xyXG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9wb3B1cEltYWdlID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcignLnBvcHVwX19pbWFnZScpO1xyXG4gICAgdGhpcy5fcG9wdXBJbWFnZUNhcHRpb24gPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2ltYWdlLWNhcHRpb24nKTtcclxuICB9XHJcblxyXG4gIG9wZW4oZGF0YSkge1xyXG4gICAgdGhpcy5fcG9wdXBJbWFnZUNhcHRpb24udGV4dENvbnRlbnQgPSBkYXRhLm5hbWU7XHJcbiAgICB0aGlzLl9wb3B1cEltYWdlLnNyYyA9IGRhdGEubGluaztcclxuICAgIHRoaXMuX3BvcHVwSW1hZ2UuYWx0ID0gdGhpcy5fcG9wdXBJbWFnZUNhcHRpb24udGV4dENvbnRlbnQ7XHJcblxyXG4gICAgc3VwZXIub3BlbigpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgUG9wdXAgZnJvbSAnLi9Qb3B1cC5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhGb3JtIGV4dGVuZHMgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IsIGhhbmRsZUZvcm1TdWJtaXQpIHtcclxuICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5faGFuZGxlU3VibWl0Rm9ybSA9IGhhbmRsZUZvcm1TdWJtaXQ7XHJcbiAgICB0aGlzLl9mb3JtRWxlbWVudCA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fZm9ybScpO1xyXG4gICAgdGhpcy5faW5wdXRMaXN0ID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnBvcHVwX19pbnB1dCcpO1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uRWxlbWVudCA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fc3VibWl0LWJ1dHRvbicpO1xyXG4gIH1cclxuXHJcbiAgY2xvc2UoKSB7XHJcbiAgICBzdXBlci5jbG9zZSgpO1xyXG4gICAgdGhpcy5fZm9ybUVsZW1lbnQucmVzZXQoKTtcclxuICB9XHJcblxyXG4gIF9nZXRJbnB1dFZhbHVlcygpIHtcclxuICAgIHRoaXMuX2Zvcm1WYWx1ZXMgPSB7fTtcclxuICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG4gICAgICB0aGlzLl9mb3JtVmFsdWVzW2lucHV0Lm5hbWVdID0gaW5wdXQudmFsdWU7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5fZm9ybVZhbHVlcztcclxuICB9XHJcblxyXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbiAgICB0aGlzLl9mb3JtRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZXZlbnQpID0+IHtcclxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgdGhpcy5faGFuZGxlU3VibWl0Rm9ybSh0aGlzLl9nZXRJbnB1dFZhbHVlcygpKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0UG9wdXBGb3JtKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2Zvcm1FbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgc2V0SW5wdXRWYWx1ZXMoZGF0YSkge1xyXG4gICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goKGlucHV0KSA9PiB7XHJcbiAgICAgIGlucHV0LnZhbHVlID0gZGF0YVtpbnB1dC5uYW1lXTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0U3VibWl0QnV0dG9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3N1Ym1pdEJ1dHRvbkVsZW1lbnQ7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBQb3B1cCBmcm9tICcuL1BvcHVwLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aENvbmZpcm1hdGlvbiBleHRlbmRzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XHJcbiAgICBzdXBlcihwb3B1cFNlbGVjdG9yKTtcclxuICAgIHRoaXMuX2hhbmRsZUNsaWNrU3VibWl0ID0ge307XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b25FbGVtZW50ID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcignLnBvcHVwX19zdWJtaXQtYnV0dG9uJyk7XHJcbiAgICB0aGlzLl9oYW5kbGVFbnRlclN1Ym1pdCA9IHRoaXMuX2hhbmRsZUVudGVyU3VibWl0LmJpbmQodGhpcyk7XHJcbiAgfVxyXG5cclxuICBzZXRIYW5kbGVyKGhhbmRsZXIpIHtcclxuICAgIHRoaXMuX2hhbmRsZUNsaWNrU3VibWl0ID0gaGFuZGxlcjtcclxuICB9XHJcblxyXG4gIF9oYW5kbGVFbnRlclN1Ym1pdChldmVudCkge1xyXG4gICAgaWYgKGV2ZW50LmtleSA9PT0gJ0VudGVyJykge1xyXG4gICAgICB0aGlzLl9oYW5kbGVDbGlja1N1Ym1pdCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb3BlbigpIHtcclxuICAgIHN1cGVyLm9wZW4oKTtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9oYW5kbGVFbnRlclN1Ym1pdCk7XHJcbiAgfVxyXG5cclxuICBjbG9zZSgpIHtcclxuICAgIHN1cGVyLmNsb3NlKCk7XHJcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5faGFuZGxlRW50ZXJTdWJtaXQpO1xyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbkVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuX2hhbmRsZUNsaWNrU3VibWl0KCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGdldFN1Ym1pdEJ1dHRvbigpIHtcclxuICAgIHJldHVybiB0aGlzLl9zdWJtaXRCdXR0b25FbGVtZW50O1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VySW5mbyB7XHJcbiAgY29uc3RydWN0b3IoeyBuYW1lU2VsZWN0b3IsIGFib3V0U2VsZWN0b3IsIGF2YXRhclNlbGVjdG9yIH0pIHtcclxuICAgIHRoaXMuX25hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG5hbWVTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9hYm91dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYWJvdXRTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9hdmF0YXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGF2YXRhclNlbGVjdG9yKTtcclxuICB9XHJcblxyXG4gIGdldFVzZXJJbmZvKCkge1xyXG4gICAgY29uc3QgdXNlckluZm9Qcm9maWxlID0ge1xyXG4gICAgICBuYW1lOiB0aGlzLl9uYW1lLnRleHRDb250ZW50LFxyXG4gICAgICBhYm91dDogdGhpcy5fYWJvdXQudGV4dENvbnRlbnQsXHJcbiAgICAgIGF2YXRhcjogdGhpcy5fYXZhdGFyLnNyYyxcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHVzZXJJbmZvUHJvZmlsZTtcclxuICB9XHJcblxyXG4gIHNldFVzZXJJbmZvKHVzZXJEYXRhKSB7XHJcbiAgICB0aGlzLl9uYW1lLnRleHRDb250ZW50ID0gdXNlckRhdGEubmFtZTtcclxuICAgIHRoaXMuX2Fib3V0LnRleHRDb250ZW50ID0gdXNlckRhdGEuYWJvdXQ7XHJcbiAgICB0aGlzLl9hdmF0YXIuc3JjID0gdXNlckRhdGEuYXZhdGFyO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtVmFsaWRhdG9yIHtcclxuICBjb25zdHJ1Y3Rvcihjb25maWcsIGZvcm1FbGVtZW50KSB7XHJcbiAgICB0aGlzLl9pbnB1dFNlbGVjdG9yID0gY29uZmlnLmlucHV0U2VsZWN0b3I7XHJcbiAgICB0aGlzLl9pbnB1dEVycm9yQ2xhc3MgPSBjb25maWcuaW5wdXRFcnJvckNsYXNzO1xyXG4gICAgdGhpcy5fZXJyb3JTZWxlY3RvciA9IGNvbmZpZy5lcnJvclNlbGVjdG9yO1xyXG4gICAgdGhpcy5fZXJyb3JDbGFzcyA9IGNvbmZpZy5lcnJvckNsYXNzO1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IgPSBjb25maWcuc3VibWl0QnV0dG9uU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzID0gY29uZmlnLmluYWN0aXZlQnV0dG9uQ2xhc3M7XHJcbiAgICB0aGlzLl9mb3JtRWxlbWVudCA9IGZvcm1FbGVtZW50O1xyXG4gICAgdGhpcy5faW5wdXRMaXN0ID0gQXJyYXkuZnJvbSh0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX2lucHV0U2VsZWN0b3IpKTtcclxuICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuX3N1Ym1pdEJ1dHRvblNlbGVjdG9yKTtcclxuICB9XHJcblxyXG4gIGVuYWJsZVZhbGlkYXRpb24oKSB7XHJcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xyXG4gIH1cclxuXHJcbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goKGlucHV0RWxlbWVudCkgPT4ge1xyXG4gICAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5faXNWYWxpZChpbnB1dEVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfaXNWYWxpZChpbnB1dEVsZW1lbnQpIHtcclxuICAgIGlmICghaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkKSB7XHJcbiAgICAgIHRoaXMuX3Nob3dJbnB1dEVycm9yKGlucHV0RWxlbWVudCwgaW5wdXRFbGVtZW50LnZhbGlkYXRpb25NZXNzYWdlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfc2hvd0lucHV0RXJyb3IoaW5wdXRFbGVtZW50LCBlcnJvck1lc3NhZ2UpIHtcclxuICAgIGNvbnN0IGVycm9yRWxlbWVudCA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoYC4ke2lucHV0RWxlbWVudC5pZH0tZXJyb3JgKTtcclxuXHJcbiAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9pbnB1dEVycm9yQ2xhc3MpO1xyXG4gICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gZXJyb3JNZXNzYWdlO1xyXG4gICAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5fZXJyb3JDbGFzcyk7XHJcbiAgfVxyXG5cclxuICBfaGlkZUlucHV0RXJyb3IoaW5wdXRFbGVtZW50KSB7XHJcbiAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKGAuJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYCk7XHJcblxyXG4gICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5wdXRFcnJvckNsYXNzKTtcclxuICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2Vycm9yQ2xhc3MpO1xyXG4gICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gJyc7XHJcbiAgfVxyXG5cclxuICBfdG9nZ2xlQnV0dG9uU3RhdGUoKSB7XHJcbiAgICBpZiAodGhpcy5faGFzSW52YWxpZElucHV0KCkpIHtcclxuICAgICAgdGhpcy5fZGlzYWJsZUJ1dHRvbigpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5fZW5hYmxlQnV0dG9uKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfaGFzSW52YWxpZElucHV0KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lucHV0TGlzdC5zb21lKChpbnB1dEVsZW1lbnQpID0+IHtcclxuICAgICAgcmV0dXJuICFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQ7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIF9kaXNhYmxlQnV0dG9uKCkge1xyXG4gICAgdGhpcy5fYnV0dG9uRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gICAgdGhpcy5fYnV0dG9uRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgfVxyXG5cclxuICBfZW5hYmxlQnV0dG9uKCkge1xyXG4gICAgdGhpcy5fYnV0dG9uRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XHJcbiAgICB0aGlzLl9idXR0b25FbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgfVxyXG5cclxuICByZXNldFZhbGlkYXRpb24oKSB7XHJcbiAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZSgpO1xyXG4gICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goKGlucHV0RWxlbWVudCkgPT4ge1xyXG4gICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwaSB7XHJcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xyXG4gICAgdGhpcy5fdXJsID0gb3B0aW9ucy5iYXNlVXJsO1xyXG4gICAgdGhpcy5faGVhZGVycyA9IG9wdGlvbnMuaGVhZGVycztcclxuICB9XHJcblxyXG4gIF9oYW5kbGVSZXNwb25zZShyZXMsIGVycm9yVGV4dCkge1xyXG4gICAgaWYgKHJlcy5vaykge1xyXG4gICAgICByZXR1cm4gcmVzLmpzb24oKTtcclxuICAgIH1cclxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvclRleHQpO1xyXG4gIH1cclxuXHJcbiAgZ2V0VXNlckluZm8oKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fdXJsfS91c2Vycy9tZWAsIHtcclxuICAgICAgbWV0aG9kOiAnR0VUJyxcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgIH0pLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICByZXR1cm4gdGhpcy5faGFuZGxlUmVzcG9uc2UocmVzLCAn0JTQsNC90L3Ri9C1INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyDQvdC1INC/0L7Qu9GD0YfQtdC90YsnKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0SW5pdGlhbENhcmRzKCkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX3VybH0vY2FyZHNgLCB7XHJcbiAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICB9KS50aGVuKChyZXMpID0+IHtcclxuICAgICAgcmV0dXJuIHRoaXMuX2hhbmRsZVJlc3BvbnNlKHJlcywgJ9Ch0L/QuNGB0L7QuiDQutCw0YDRgtC+0YfQtdC6INC90LUg0L/QvtC70YPRh9C10L0nKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0SW5pdGlhbERhdGEoKSB7XHJcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoW3RoaXMuZ2V0VXNlckluZm8oKSwgdGhpcy5nZXRJbml0aWFsQ2FyZHMoKV0pO1xyXG4gIH1cclxuXHJcbiAgZWRpdFVzZXJJbmZvKGRhdGEpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl91cmx9L3VzZXJzL21lYCwge1xyXG4gICAgICBtZXRob2Q6ICdQQVRDSCcsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxyXG4gICAgfSkudGhlbigocmVzKSA9PiB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9oYW5kbGVSZXNwb25zZShyZXMsICfQlNCw0L3QvdGL0LUg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPINC90LUg0LjQt9C80LXQvdC10L3RiycpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBhZGROZXdDYXJkKGRhdGEpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl91cmx9L2NhcmRzYCwge1xyXG4gICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXHJcbiAgICB9KS50aGVuKChyZXMpID0+IHtcclxuICAgICAgcmV0dXJuIHRoaXMuX2hhbmRsZVJlc3BvbnNlKHJlcywgJ9Ca0LDRgNGC0L7Rh9C60LAg0L3QtSDQtNC+0LHQsNCy0LvQtdC90LAnKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZGVsZXRlQ2FyZChpZCkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX3VybH0vY2FyZHMvJHtpZH1gLCB7XHJcbiAgICAgIG1ldGhvZDogJ0RFTEVURScsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICB9KS50aGVuKChyZXMpID0+IHtcclxuICAgICAgcmV0dXJuIHRoaXMuX2hhbmRsZVJlc3BvbnNlKHJlcywgJ9Ca0LDRgNGC0L7Rh9C60LAg0L3QtSDRg9C00LDQu9C10L3QsCcpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwdXRMaWtlKGlkKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fdXJsfS9jYXJkcy8ke2lkfS9saWtlc2AsIHtcclxuICAgICAgbWV0aG9kOiAnUFVUJyxcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgIH0pLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICByZXR1cm4gdGhpcy5faGFuZGxlUmVzcG9uc2UocmVzLCAn0JvQsNC50Log0L3QtSDQtNC+0LHQsNCy0LvQtdC9Jyk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGRlbGV0ZUxpa2UoaWQpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl91cmx9L2NhcmRzLyR7aWR9L2xpa2VzYCwge1xyXG4gICAgICBtZXRob2Q6ICdERUxFVEUnLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgfSkudGhlbigocmVzKSA9PiB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9oYW5kbGVSZXNwb25zZShyZXMsICfQm9Cw0LnQuiDQvdC1INGD0LHRgNCw0L0nKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlQXZhdGFyKGRhdGEpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl91cmx9L3VzZXJzL21lL2F2YXRhcmAsIHtcclxuICAgICAgbWV0aG9kOiAnUEFUQ0gnLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSxcclxuICAgIH0pLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICByZXR1cm4gdGhpcy5faGFuZGxlUmVzcG9uc2UocmVzLCAn0JDQstCw0YLQsNGAINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyDQvdC1INC40LfQvNC10L3QtdC9Jyk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiLy8gRnVuY3Rpb24gdG8gY2hhbmdlIHRoZSBzdWJtaXQgYnV0dG9uIHRleHQgd2hlbiB0byByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXJcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRTdWJtaXRJbml0aWFsVGV4dChwb3B1cCkge1xyXG4gIGNvbnN0IGluaXRpYWxUZXh0ID0gcG9wdXAuZ2V0U3VibWl0QnV0dG9uKCkudGV4dENvbnRlbnQ7XHJcbiAgcmV0dXJuIGluaXRpYWxUZXh0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2hhbmdlU3VibWl0VGV4dChzdGFydERvd25sb2FkLCBwb3B1cCwgaW5pdGlhbFRleHQsIHVwbG9hZFRleHQpIHtcclxuICBjb25zdCBzdWJtaXRCdXR0b24gPSBwb3B1cC5nZXRTdWJtaXRCdXR0b24oKTtcclxuXHJcbiAgaWYgKHN0YXJ0RG93bmxvYWQpIHtcclxuICAgIHN1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IHVwbG9hZFRleHQ7XHJcbiAgfSBlbHNlIHtcclxuICAgIHN1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IGluaXRpYWxUZXh0O1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgY29uc3QgcHJvZmlsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlJyk7XHJcbmV4cG9ydCBjb25zdCBidXR0b25Gb3JFZGl0aW5nUHJvZmlsZSA9IHByb2ZpbGUucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2VkaXQtYnV0dG9uJyk7XHJcbmV4cG9ydCBjb25zdCBidXR0b25Gb3JBZGRpbmdDYXJkID0gcHJvZmlsZS5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fYWRkLWJ1dHRvbicpO1xyXG5leHBvcnQgY29uc3QgYnV0dG9uRm9yVXBkYXRpbmdBdmF0YXIgPSBwcm9maWxlLnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlX191cGRhdGUtYnV0dG9uJyk7XHJcblxyXG5leHBvcnQgY29uc3QgY2FyZHNTZWxlY3RvciA9ICcucGxhY2VzX19saXN0JztcclxuXHJcbmV4cG9ydCBjb25zdCBjb25maWcgPSB7XHJcbiAgaW5wdXRTZWxlY3RvcjogJy5wb3B1cF9faW5wdXQnLFxyXG4gIGlucHV0RXJyb3JDbGFzczogJ3BvcHVwX19pbnB1dF90eXBlX2Vycm9yJyxcclxuICBlcnJvclNlbGVjdG9yOiAnLnBvcHVwX19lcnJvcicsXHJcbiAgZXJyb3JDbGFzczogJ3BvcHVwX19lcnJvcl9hY3RpdmUnLFxyXG4gIHN1Ym1pdEJ1dHRvblNlbGVjdG9yOiAnLnBvcHVwX19zdWJtaXQtYnV0dG9uJyxcclxuICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiAncG9wdXBfX3N1Ym1pdC1idXR0b25fZGlzYWJsZWQnLFxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGZvcm1WYWxpZGF0b3JzID0ge307XHJcbmV4cG9ydCBjb25zdCBmb3JtTGlzdCA9IEFycmF5LmZyb20oZG9jdW1lbnQuZm9ybXMpO1xyXG5cclxuZXhwb3J0IGNvbnN0IHNhdmVUZXh0ID0gJ9Ch0L7RhdGA0LDQvdC10L3QuNC1Li4uJztcclxuZXhwb3J0IGNvbnN0IGRlbGV0ZVRleHQgPSAn0KPQtNCw0LvQtdC90LjQtS4uLic7XHJcbiIsImltcG9ydCAnLi9pbmRleC5jc3MnO1xyXG5cclxuaW1wb3J0IFNlY3Rpb24gZnJvbSAnLi4vLi4vc2NyaXB0cy9jb21wb25lbnRzL1NlY3Rpb24uanMnO1xyXG5pbXBvcnQgQ2FyZCBmcm9tICcuLi8uLi9zY3JpcHRzL2NvbXBvbmVudHMvQ2FyZC5qcyc7XHJcbmltcG9ydCBQb3B1cFdpdGhJbWFnZSBmcm9tICcuLi8uLi9zY3JpcHRzL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanMnO1xyXG5pbXBvcnQgUG9wdXBXaXRoRm9ybSBmcm9tICcuLi8uLi9zY3JpcHRzL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyc7XHJcbmltcG9ydCBQb3B1cFdpdGhDb25maXJtYXRpb24gZnJvbSAnLi4vLi4vc2NyaXB0cy9jb21wb25lbnRzL1BvcHVwV2l0aENvbmZpcm1hdGlvbi5qcyc7XHJcbmltcG9ydCBVc2VySW5mbyBmcm9tICcuLi8uLi9zY3JpcHRzL2NvbXBvbmVudHMvVXNlckluZm8uanMnO1xyXG5pbXBvcnQgRm9ybVZhbGlkYXRvciBmcm9tICcuLi8uLi9zY3JpcHRzL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyc7XHJcbmltcG9ydCBBcGkgZnJvbSAnLi4vLi4vc2NyaXB0cy9jb21wb25lbnRzL0FwaS5qcyc7XHJcblxyXG5pbXBvcnQgeyBnZXRTdWJtaXRJbml0aWFsVGV4dCwgY2hhbmdlU3VibWl0VGV4dCB9IGZyb20gJy4uLy4uL3NjcmlwdHMvdXRpbHMvdXRpbHMuanMnO1xyXG5cclxuaW1wb3J0IHtcclxuICBidXR0b25Gb3JFZGl0aW5nUHJvZmlsZSxcclxuICBidXR0b25Gb3JBZGRpbmdDYXJkLFxyXG4gIGJ1dHRvbkZvclVwZGF0aW5nQXZhdGFyLFxyXG4gIGNhcmRzU2VsZWN0b3IsXHJcbiAgY29uZmlnLFxyXG4gIGZvcm1WYWxpZGF0b3JzLFxyXG4gIGZvcm1MaXN0LFxyXG4gIHNhdmVUZXh0LFxyXG4gIGRlbGV0ZVRleHQsXHJcbn0gZnJvbSAnLi4vLi4vc2NyaXB0cy91dGlscy9jb25zdGFudHMuanMnO1xyXG5cclxuLy8gU3luY1xyXG5cclxuLy8gQ3JlYXRlIHBvcHVwIHdpdGggdGhlIGltYWdlXHJcblxyXG5jb25zdCBwb3B1cEVubGFyZ2luZyA9IG5ldyBQb3B1cFdpdGhJbWFnZSgnLnBvcHVwX3R5cGVfZW5sYXJnZScpO1xyXG5wb3B1cEVubGFyZ2luZy5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuLy8gQ3JlYXRlIHBvcHVwIHdpdGggdGhlIHN1Ym1pdFxyXG5cclxuY29uc3QgcG9wdXBTdWJtaXRpbmcgPSBuZXcgUG9wdXBXaXRoQ29uZmlybWF0aW9uKCcucG9wdXBfdHlwZV9zdWJtaXQnKTtcclxucG9wdXBTdWJtaXRpbmcuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbi8vIENyZWF0ZSB0aGUgdXNlciBpbmZvIGNvbnRyb2wgb2JqZWN0XHJcblxyXG5jb25zdCB1c2VySW5mbyA9IG5ldyBVc2VySW5mbyh7XHJcbiAgbmFtZVNlbGVjdG9yOiAnLnByb2ZpbGVfX25hbWUnLFxyXG4gIGFib3V0U2VsZWN0b3I6ICcucHJvZmlsZV9fYWJvdXQnLFxyXG4gIGF2YXRhclNlbGVjdG9yOiAnLnByb2ZpbGVfX3Bob3RvJyxcclxufSk7XHJcblxyXG4vLyBDb25maWd1cmUgQXBpXHJcblxyXG5jb25zdCBhcGkgPSBuZXcgQXBpKHtcclxuICBiYXNlVXJsOiAnaHR0cHM6Ly9tZXN0by5ub21vcmVwYXJ0aWVzLmNvL3YxL2NvaG9ydC00MScsXHJcbiAgaGVhZGVyczoge1xyXG4gICAgYXV0aG9yaXphdGlvbjogJ2I2YmRlOWJlLTg2NzQtNGVjYS04MTc5LTMwMmUwYTRlMmI2ZicsXHJcbiAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gIH0sXHJcbn0pO1xyXG5cclxuLy8gQXN5bmNoXHJcblxyXG4vLyBHZXQgaW5pdGlhbCBkYXRhIGZyb20gdGhlIHNlcnZlclxyXG5cclxuYXBpXHJcbiAgLmdldEluaXRpYWxEYXRhKClcclxuICAudGhlbigoaW5pdGlhbERhdGEpID0+IHtcclxuICAgIGNvbnN0IFt1c2VyRGF0YSwgaW5pdGlhbENhcmRzRGF0YV0gPSBpbml0aWFsRGF0YTtcclxuXHJcbiAgICAvLyBTZXQgdXNlciBpbmZvXHJcblxyXG4gICAgdXNlckluZm8uc2V0VXNlckluZm8odXNlckRhdGEpO1xyXG5cclxuICAgIC8vIEZ1bmN0aW9uIGZvciBjaGVja2luZyB0aGUgY2FyZCBmb3IgbGlrZXNcclxuXHJcbiAgICBmdW5jdGlvbiBjaGVja0xpa2VDYXJkKGl0ZW0pIHtcclxuICAgICAgcmV0dXJuIGl0ZW0ubGlrZXMuc29tZSgobGlrZSkgPT4gbGlrZS5faWQgPT09IHVzZXJEYXRhLl9pZCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgY2FyZFxyXG5cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZUNhcmQoaXRlbSkge1xyXG4gICAgICBjb25zdCBjYXJkRWxlbWVudCA9IG5ldyBDYXJkKFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGRhdGE6IGl0ZW0sXHJcbiAgICAgICAgICBoYW5kbGVDYXJkQ2xpY2s6ICgpID0+IHtcclxuICAgICAgICAgICAgcG9wdXBFbmxhcmdpbmcub3BlbihpdGVtKTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBoYW5kbGVMaWtlQ2xpY2s6ICgpID0+IHtcclxuICAgICAgICAgICAgLy8gRnVuY3Rpb24gZm9yIHVwZGF0aW5nIGNvdW50ZXIgYWZ0ZXIgY2hhbmdpbmcgdGhlIGxpa2VcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZdChb3VudGVyKGNhcmREYXRhKSB7XHJcbiAgICAgICAgICAgICAgY2FyZEVsZW1lbnQudXBkYXRl0KFvdW50ZXIoY2FyZERhdGEubGlrZXMubGVuZ3RoKTtcclxuICAgICAgICAgICAgICBpdGVtLmxpa2VzID0gY2FyZERhdGEubGlrZXM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIERlbGV0ZSBhIGxpa2UsIGlmIHRoZXJlIGlzIG9uZSwgb3RoZXJ3aXNlIHB1dCB0aGUgbGlrZVxyXG5cclxuICAgICAgICAgICAgaWYgKGNoZWNrTGlrZUNhcmQoaXRlbSkpIHtcclxuICAgICAgICAgICAgICBhcGlcclxuICAgICAgICAgICAgICAgIC5kZWxldGVMaWtlKGl0ZW0uX2lkKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKGNhcmREYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIGNhcmRFbGVtZW50LmRlbGV0ZUxpa2UoKTtcclxuICAgICAgICAgICAgICAgICAgdXBkYXRl0KFvdW50ZXIoY2FyZERhdGEpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IGNvbnNvbGUubG9nKGDQntGI0LjQsdC60LA6ICR7ZXJyb3J9YCkpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGFwaVxyXG4gICAgICAgICAgICAgICAgLnB1dExpa2UoaXRlbS5faWQpXHJcbiAgICAgICAgICAgICAgICAudGhlbigoY2FyZERhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgICAgY2FyZEVsZW1lbnQucHV0TGlrZSgpO1xyXG4gICAgICAgICAgICAgICAgICB1cGRhdGXQoW91bnRlcihjYXJkRGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4gY29uc29sZS5sb2coYNCe0YjQuNCx0LrQsDogJHtlcnJvcn1gKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBoYW5kbGVEZWxldGVCdXR0b25DbGljazogKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3B1cFN1Ym1pdGluZy5zZXRIYW5kbGVyKCgpID0+IHtcclxuICAgICAgICAgICAgICAvLyBNYW5hZ2Ugc3VibWl0IGJ1dHRvbiB0ZXh0XHJcblxyXG4gICAgICAgICAgICAgIGNvbnN0IGluaXRpYWxUZXh0ID0gZ2V0U3VibWl0SW5pdGlhbFRleHQocG9wdXBTdWJtaXRpbmcpO1xyXG4gICAgICAgICAgICAgIGNoYW5nZVN1Ym1pdFRleHQodHJ1ZSwgcG9wdXBTdWJtaXRpbmcsIGluaXRpYWxUZXh0LCBkZWxldGVUZXh0KTtcclxuXHJcbiAgICAgICAgICAgICAgYXBpXHJcbiAgICAgICAgICAgICAgICAuZGVsZXRlQ2FyZChpdGVtLl9pZClcclxuICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgY2FyZEVsZW1lbnQuZGVsZXRlQ2FyZCgpO1xyXG4gICAgICAgICAgICAgICAgICBwb3B1cFN1Ym1pdGluZy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IGNvbnNvbGUubG9nKGDQntGI0LjQsdC60LA6ICR7ZXJyb3J9YCkpXHJcbiAgICAgICAgICAgICAgICAuZmluYWxseSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIGNoYW5nZVN1Ym1pdFRleHQoZmFsc2UsIHBvcHVwU3VibWl0aW5nLCBpbml0aWFsVGV4dCwgZGVsZXRlVGV4dCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBwb3B1cFN1Ym1pdGluZy5vcGVuKCk7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJy5wbGFjZS10ZW1wbGF0ZSdcclxuICAgICAgKTtcclxuXHJcbiAgICAgIHJldHVybiBjYXJkRWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZW5kZXIgaW5pdGlhbCBjYXJkc1xyXG5cclxuICAgIGNvbnN0IGNhcmRMaXN0ID0gbmV3IFNlY3Rpb24oXHJcbiAgICAgIHtcclxuICAgICAgICBpdGVtczogaW5pdGlhbENhcmRzRGF0YS5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgICBpZiAoYS5jcmVhdGVkQXQgPiBiLmNyZWF0ZWRBdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChhLmNyZWF0ZWRBdCA8IGIuY3JlYXRlZEF0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9KSxcclxuICAgICAgICByZW5kZXI6IChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAvLyBjaGVjayBhIGNhcmQgb3duZXIgYW5kIHVzZXIncyBsaWtlXHJcblxyXG4gICAgICAgICAgY29uc3QgaXNOb3RVc2VyQ2FyZCA9IGl0ZW0ub3duZXIuX2lkID09PSB1c2VyRGF0YS5faWQgPyBmYWxzZSA6IHRydWU7XHJcbiAgICAgICAgICBjb25zdCBpc0xpa2VkQnlVc2VyID0gY2hlY2tMaWtlQ2FyZChpdGVtKTtcclxuXHJcbiAgICAgICAgICBjb25zdCBjYXJkRWxlbWVudCA9IGNyZWF0ZUNhcmQoaXRlbSkuZ2VuZXJhdGVDYXJkKHsgaXNOb3RVc2VyQ2FyZCwgaXNMaWtlZEJ5VXNlciB9KTtcclxuICAgICAgICAgIGNhcmRMaXN0LmFkZEl0ZW0oY2FyZEVsZW1lbnQpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICAgIGNhcmRzU2VsZWN0b3JcclxuICAgICk7XHJcbiAgICBjYXJkTGlzdC5yZW5kZXJJdGVtcygpO1xyXG5cclxuICAgIHJldHVybiB7IHVzZXJEYXRhLCBpbml0aWFsQ2FyZHNEYXRhLCBjYXJkTGlzdCB9O1xyXG4gIH0pXHJcblxyXG4gIC50aGVuKChkYXRhT2JqZWN0KSA9PiB7XHJcbiAgICAvLyBGdW5jdGlvbiB0byBzdGFydCB2YWxpZGF0aW9uXHJcblxyXG4gICAgZnVuY3Rpb24gZW5hYmxlVmFsaWRhdGlvbihjb25maWcpIHtcclxuICAgICAgZm9ybUxpc3QuZm9yRWFjaCgoZm9ybUVsZW1lbnQpID0+IHtcclxuICAgICAgICBjb25zdCB2YWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihjb25maWcsIGZvcm1FbGVtZW50KTtcclxuICAgICAgICBjb25zdCBmb3JtTmFtZSA9IGZvcm1FbGVtZW50LmdldEF0dHJpYnV0ZSgnbmFtZScpO1xyXG5cclxuICAgICAgICBmb3JtVmFsaWRhdG9yc1tmb3JtTmFtZV0gPSB2YWxpZGF0b3I7XHJcblxyXG4gICAgICAgIHZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFN0YXJ0IGZvcm0gdmFsaWRhdGlvblxyXG5cclxuICAgIGVuYWJsZVZhbGlkYXRpb24oY29uZmlnKTtcclxuXHJcbiAgICByZXR1cm4gZGF0YU9iamVjdDtcclxuICB9KVxyXG5cclxuICAudGhlbigoZGF0YU9iamVjdCkgPT4ge1xyXG4gICAgLy8gQ3JlYXRlIGEgcG9wdXAgZm9yIGVkaXRpbmdcclxuXHJcbiAgICBjb25zdCBwb3B1cEVkaXRpbmcgPSBuZXcgUG9wdXBXaXRoRm9ybSgnLnBvcHVwX3R5cGVfZWRpdCcsIChpbnB1dFZhbHVlcykgPT4ge1xyXG4gICAgICAvLyBNYW5hZ2Ugc3VibWl0IGJ1dHRvbiB0ZXh0XHJcblxyXG4gICAgICBjb25zdCBpbml0aWFsVGV4dCA9IGdldFN1Ym1pdEluaXRpYWxUZXh0KHBvcHVwRWRpdGluZyk7XHJcbiAgICAgIGNoYW5nZVN1Ym1pdFRleHQodHJ1ZSwgcG9wdXBFZGl0aW5nLCBpbml0aWFsVGV4dCwgc2F2ZVRleHQpO1xyXG5cclxuICAgICAgLy8gRWRpdCB1c2VyIGluZm9cclxuXHJcbiAgICAgIGFwaVxyXG4gICAgICAgIC5lZGl0VXNlckluZm8oaW5wdXRWYWx1ZXMpXHJcbiAgICAgICAgLnRoZW4oKHVzZXJEYXRhKSA9PiB7XHJcbiAgICAgICAgICB1c2VySW5mby5zZXRVc2VySW5mbyh1c2VyRGF0YSk7XHJcbiAgICAgICAgICBwb3B1cEVkaXRpbmcuY2xvc2UoKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IGNvbnNvbGUubG9nKGDQntGI0LjQsdC60LA6ICR7ZXJyb3J9YCkpXHJcbiAgICAgICAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICAgICAgY2hhbmdlU3VibWl0VGV4dChmYWxzZSwgcG9wdXBFZGl0aW5nLCBpbml0aWFsVGV4dCwgc2F2ZVRleHQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcG9wdXBFZGl0aW5nLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG4gICAgLy8gQWRkIGxpc3RlbmVycyB0byBvcGVuIHRoZSBwb3B1cCBmb3IgZWRpdGluZ1xyXG5cclxuICAgIGZ1bmN0aW9uIGhhbmRsZUVkaXRCdXR0b24oKSB7XHJcbiAgICAgIHBvcHVwRWRpdGluZy5zZXRJbnB1dFZhbHVlcyh1c2VySW5mby5nZXRVc2VySW5mbygpKTtcclxuICAgICAgZm9ybVZhbGlkYXRvcnNbJ2VkaXQnXS5yZXNldFZhbGlkYXRpb24oKTtcclxuICAgICAgcG9wdXBFZGl0aW5nLm9wZW4oKTtcclxuICAgIH1cclxuXHJcbiAgICBidXR0b25Gb3JFZGl0aW5nUHJvZmlsZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZUVkaXRCdXR0b24pO1xyXG5cclxuICAgIHJldHVybiBkYXRhT2JqZWN0O1xyXG4gIH0pXHJcblxyXG4gIC50aGVuKChkYXRhT2JqZWN0KSA9PiB7XHJcbiAgICAvLyBDcmVhdGUgYSBwb3B1cCBmb3IgYWRkaW5nXHJcblxyXG4gICAgY29uc3QgcG9wdXBBZGRpbmcgPSBuZXcgUG9wdXBXaXRoRm9ybSgnLnBvcHVwX3R5cGVfYWRkJywgKGlucHV0VmFsdWVzKSA9PiB7XHJcbiAgICAgIC8vIE1hbmFnZSBzdWJtaXQgYnV0dG9uIHRleHRcclxuXHJcbiAgICAgIGNvbnN0IGluaXRpYWxUZXh0ID0gZ2V0U3VibWl0SW5pdGlhbFRleHQocG9wdXBBZGRpbmcpO1xyXG4gICAgICBjaGFuZ2VTdWJtaXRUZXh0KHRydWUsIHBvcHVwQWRkaW5nLCBpbml0aWFsVGV4dCwgc2F2ZVRleHQpO1xyXG5cclxuICAgICAgLy8gR2V0IGRhdGEgZnJvbSBwb3B1cCBhZGRpbmdcclxuXHJcbiAgICAgIGNvbnN0IGRhdGEgPSB7XHJcbiAgICAgICAgbmFtZTogaW5wdXRWYWx1ZXMucGxhY2UsXHJcbiAgICAgICAgbGluazogaW5wdXRWYWx1ZXMubGluayxcclxuICAgICAgfTtcclxuXHJcbiAgICAgIC8vIEFkZCBhIG5ldyBjYXJkXHJcblxyXG4gICAgICBhcGlcclxuICAgICAgICAuYWRkTmV3Q2FyZChkYXRhKVxyXG4gICAgICAgIC50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgICAgICBkYXRhT2JqZWN0LmNhcmRMaXN0LnJlbmRlck9uZUl0ZW0oZGF0YSk7XHJcbiAgICAgICAgICBwb3B1cEFkZGluZy5jbG9zZSgpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKChlcnJvcikgPT4gY29uc29sZS5sb2coYNCe0YjQuNCx0LrQsDogJHtlcnJvcn1gKSlcclxuICAgICAgICAuZmluYWxseSgoKSA9PiB7XHJcbiAgICAgICAgICBjaGFuZ2VTdWJtaXRUZXh0KGZhbHNlLCBwb3B1cEFkZGluZywgaW5pdGlhbFRleHQsIHNhdmVUZXh0KTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHBvcHVwQWRkaW5nLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG4gICAgLy8gQWRkIGxpc3RlbmVycyB0byBvcGVuIHRoZSBwb3B1cCBmb3IgYWRkaW5nXHJcblxyXG4gICAgZnVuY3Rpb24gaGFuZGxlQnV0dG9uRm9yQWRkaW5nQ2FyZCgpIHtcclxuICAgICAgZm9ybVZhbGlkYXRvcnNbJ2FkZCddLnJlc2V0VmFsaWRhdGlvbigpO1xyXG4gICAgICBwb3B1cEFkZGluZy5vcGVuKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYnV0dG9uRm9yQWRkaW5nQ2FyZC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZUJ1dHRvbkZvckFkZGluZ0NhcmQpO1xyXG5cclxuICAgIHJldHVybiBkYXRhT2JqZWN0O1xyXG4gIH0pXHJcblxyXG4gIC50aGVuKChkYXRhT2JqZWN0KSA9PiB7XHJcbiAgICAvLyBDcmVhdGUgYSBwb3B1cCB0byB1cGRhdGUgYXZhdGFyXHJcblxyXG4gICAgY29uc3QgcG9wdXBVcGRhdGluZ0F2YXRhciA9IG5ldyBQb3B1cFdpdGhGb3JtKCcucG9wdXBfdHlwZV91cGRhdGUtYXZhdGFyJywgKGlucHV0VmFsdWVzKSA9PiB7XHJcbiAgICAgIC8vIE1hbmFnZSBzdWJtaXQgYnV0dG9uIHRleHRcclxuXHJcbiAgICAgIGNvbnN0IGluaXRpYWxUZXh0ID0gZ2V0U3VibWl0SW5pdGlhbFRleHQocG9wdXBVcGRhdGluZ0F2YXRhcik7XHJcbiAgICAgIGNoYW5nZVN1Ym1pdFRleHQodHJ1ZSwgcG9wdXBVcGRhdGluZ0F2YXRhciwgaW5pdGlhbFRleHQsIHNhdmVUZXh0KTtcclxuXHJcbiAgICAgIGNvbnN0IGRhdGEgPSB7XHJcbiAgICAgICAgYXZhdGFyOiBpbnB1dFZhbHVlc1snYXZhdGFyLWxpbmsnXSxcclxuICAgICAgfTtcclxuXHJcbiAgICAgIC8vIFVwZGF0ZSBhdmF0YXJcclxuXHJcbiAgICAgIGFwaVxyXG4gICAgICAgIC51cGRhdGVBdmF0YXIoZGF0YSlcclxuICAgICAgICAudGhlbigodXNlckRhdGEpID0+IHtcclxuICAgICAgICAgIHVzZXJJbmZvLnNldFVzZXJJbmZvKHVzZXJEYXRhKTtcclxuICAgICAgICAgIHBvcHVwVXBkYXRpbmdBdmF0YXIuY2xvc2UoKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IGNvbnNvbGUubG9nKGDQntGI0LjQsdC60LA6ICR7ZXJyb3J9YCkpXHJcbiAgICAgICAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICAgICAgY2hhbmdlU3VibWl0VGV4dChmYWxzZSwgcG9wdXBVcGRhdGluZ0F2YXRhciwgaW5pdGlhbFRleHQsIHNhdmVUZXh0KTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHBvcHVwVXBkYXRpbmdBdmF0YXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbiAgICAvLyBBZGQgbGlzdGVuZXJzIHRvIG9wZW4gdGhlIHBvcHVwIGZvciBhZGRpbmdcclxuXHJcbiAgICBmdW5jdGlvbiBoYW5kbGVCdXR0b25Gb3JVcGRhdGluZ0F2YXRhcigpIHtcclxuICAgICAgZm9ybVZhbGlkYXRvcnNbJ3VwZGF0ZS1hdmF0YXInXS5yZXNldFZhbGlkYXRpb24oKTtcclxuICAgICAgcG9wdXBVcGRhdGluZ0F2YXRhci5vcGVuKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYnV0dG9uRm9yVXBkYXRpbmdBdmF0YXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVCdXR0b25Gb3JVcGRhdGluZ0F2YXRhcik7XHJcblxyXG4gICAgcmV0dXJuIGRhdGFPYmplY3Q7XHJcbiAgfSlcclxuXHJcbiAgLmNhdGNoKChlcnJvcikgPT4gY29uc29sZS5sb2coYNCe0YjQuNCx0LrQsDogJHtlcnJvcn1gKSk7XHJcbiJdLCJuYW1lcyI6WyJTZWN0aW9uIiwiY29udGFpbmVyU2VsZWN0b3IiLCJpdGVtcyIsInJlbmRlciIsInRoaXMiLCJfaXRlbXMiLCJfcmVuZGVyZXIiLCJfY29udGFpbmVyIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZm9yRWFjaCIsIml0ZW0iLCJlbGVtZW50IiwicHJlcGVuZCIsIkNhcmQiLCJjYXJkU2VsZWN0b3IiLCJkYXRhIiwiaGFuZGxlQ2FyZENsaWNrIiwiaGFuZGxlTGlrZUNsaWNrIiwiaGFuZGxlRGVsZXRlQnV0dG9uQ2xpY2siLCJfZGF0YSIsIl90aXRsZSIsIm5hbWUiLCJfbGluayIsImxpbmsiLCJfbGlrZXMiLCJsaWtlcyIsImxlbmd0aCIsIl9pZCIsIl9vd25lcklkIiwib3duZXIiLCJfYWx0IiwiX2hhbmRsZUNhcmRDbGljayIsIl9oYW5kbGVMaWtlQ2xpY2siLCJfaGFuZGxlRGVsZXRlQnV0dG9uQ2xpY2siLCJfY2FyZFNlbGVjdG9yIiwiY29udGVudCIsImNsb25lTm9kZSIsImlzTm90VXNlckNhcmQiLCJfZGVsZXRlQnV0dG9uIiwicmVtb3ZlIiwiaXNMaWtlZEJ5VXNlciIsInB1dExpa2UiLCJjaGXRgWtzIiwiX2VsZW1lbnQiLCJfZ2V0VGVtcGxhdGUiLCJfbGlrZUJ1dHRvbiIsIl9lbmxhcmdlQnV0dG9uIiwiX2NhcmRMaWtlcyIsImNhcmRUaXRsZSIsImNhcmRJbWFnZSIsInRleHRDb250ZW50Iiwic3JjIiwiYWx0IiwiX3NldEV2ZW50TGlzdGVuZXJzIiwiX2NoZWNrQ2FyZCIsIl9jaGVja0xpa2UiLCJhZGRFdmVudExpc3RlbmVyIiwiY2xhc3NMaXN0IiwiYWRkIiwiUG9wdXAiLCJwb3B1cFNlbGVjdG9yIiwiX3BvcHVwU2VsZWN0b3IiLCJfcG9wdXAiLCJfb3BlblBvcHVwU2VsZWN0b3IiLCJfaGFuZGxlRXNjQ2xvc2UiLCJiaW5kIiwiZXZlbnQiLCJrZXkiLCJjbG9zZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ0YXJnZXQiLCJjdXJyZW50VGFyZ2V0IiwiY29udGFpbnMiLCJfaGFuZGxlQ2xpY2tDbG9zZSIsIlBvcHVwV2l0aEltYWdlIiwiX3BvcHVwSW1hZ2UiLCJfcG9wdXBJbWFnZUNhcHRpb24iLCJQb3B1cFdpdGhGb3JtIiwiaGFuZGxlRm9ybVN1Ym1pdCIsIl9oYW5kbGVTdWJtaXRGb3JtIiwiX2Zvcm1FbGVtZW50IiwiX2lucHV0TGlzdCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJfc3VibWl0QnV0dG9uRWxlbWVudCIsInJlc2V0IiwiX2Zvcm1WYWx1ZXMiLCJpbnB1dCIsInZhbHVlIiwicHJldmVudERlZmF1bHQiLCJfZ2V0SW5wdXRWYWx1ZXMiLCJQb3B1cFdpdGhDb25maXJtYXRpb24iLCJfaGFuZGxlQ2xpY2tTdWJtaXQiLCJfaGFuZGxlRW50ZXJTdWJtaXQiLCJoYW5kbGVyIiwiVXNlckluZm8iLCJuYW1lU2VsZWN0b3IiLCJhYm91dFNlbGVjdG9yIiwiYXZhdGFyU2VsZWN0b3IiLCJfbmFtZSIsIl9hYm91dCIsIl9hdmF0YXIiLCJhYm91dCIsImF2YXRhciIsInVzZXJEYXRhIiwiRm9ybVZhbGlkYXRvciIsImNvbmZpZyIsImZvcm1FbGVtZW50IiwiX2lucHV0U2VsZWN0b3IiLCJpbnB1dFNlbGVjdG9yIiwiX2lucHV0RXJyb3JDbGFzcyIsImlucHV0RXJyb3JDbGFzcyIsIl9lcnJvclNlbGVjdG9yIiwiZXJyb3JTZWxlY3RvciIsIl9lcnJvckNsYXNzIiwiZXJyb3JDbGFzcyIsIl9zdWJtaXRCdXR0b25TZWxlY3RvciIsInN1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiX2luYWN0aXZlQnV0dG9uQ2xhc3MiLCJpbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiQXJyYXkiLCJmcm9tIiwiX2J1dHRvbkVsZW1lbnQiLCJpbnB1dEVsZW1lbnQiLCJfaXNWYWxpZCIsIl90b2dnbGVCdXR0b25TdGF0ZSIsInZhbGlkaXR5IiwidmFsaWQiLCJfaGlkZUlucHV0RXJyb3IiLCJfc2hvd0lucHV0RXJyb3IiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsImVycm9yTWVzc2FnZSIsImVycm9yRWxlbWVudCIsImlkIiwiX2hhc0ludmFsaWRJbnB1dCIsIl9kaXNhYmxlQnV0dG9uIiwiX2VuYWJsZUJ1dHRvbiIsInNvbWUiLCJzZXRBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJBcGkiLCJvcHRpb25zIiwiX3VybCIsImJhc2VVcmwiLCJfaGVhZGVycyIsImhlYWRlcnMiLCJyZXMiLCJlcnJvclRleHQiLCJvayIsImpzb24iLCJQcm9taXNlIiwicmVqZWN0IiwiZmV0Y2giLCJtZXRob2QiLCJ0aGVuIiwiX2hhbmRsZVJlc3BvbnNlIiwiYWxsIiwiZ2V0VXNlckluZm8iLCJnZXRJbml0aWFsQ2FyZHMiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImdldFN1Ym1pdEluaXRpYWxUZXh0IiwicG9wdXAiLCJnZXRTdWJtaXRCdXR0b24iLCJjaGFuZ2VTdWJtaXRUZXh0Iiwic3RhcnREb3dubG9hZCIsImluaXRpYWxUZXh0IiwidXBsb2FkVGV4dCIsInByb2ZpbGUiLCJidXR0b25Gb3JFZGl0aW5nUHJvZmlsZSIsImJ1dHRvbkZvckFkZGluZ0NhcmQiLCJidXR0b25Gb3JVcGRhdGluZ0F2YXRhciIsImZvcm1WYWxpZGF0b3JzIiwiZm9ybUxpc3QiLCJmb3JtcyIsInNhdmVUZXh0IiwiZGVsZXRlVGV4dCIsInBvcHVwRW5sYXJnaW5nIiwic2V0RXZlbnRMaXN0ZW5lcnMiLCJwb3B1cFN1Ym1pdGluZyIsInVzZXJJbmZvIiwiYXBpIiwiYXV0aG9yaXphdGlvbiIsImdldEluaXRpYWxEYXRhIiwiaW5pdGlhbERhdGEiLCJpbml0aWFsQ2FyZHNEYXRhIiwiY2hlY2tMaWtlQ2FyZCIsImxpa2UiLCJzZXRVc2VySW5mbyIsImNhcmRMaXN0Iiwic29ydCIsImEiLCJiIiwiY3JlYXRlZEF0IiwiY2FyZEVsZW1lbnQiLCJvcGVuIiwidXBkYXRl0KFvdW50ZXIiLCJjYXJkRGF0YSIsImRlbGV0ZUxpa2UiLCJjYXRjaCIsImVycm9yIiwiY29uc29sZSIsImxvZyIsInNldEhhbmRsZXIiLCJkZWxldGVDYXJkIiwiZmluYWxseSIsImNyZWF0ZUNhcmQiLCJnZW5lcmF0ZUNhcmQiLCJhZGRJdGVtIiwicmVuZGVySXRlbXMiLCJkYXRhT2JqZWN0IiwidmFsaWRhdG9yIiwiZm9ybU5hbWUiLCJnZXRBdHRyaWJ1dGUiLCJlbmFibGVWYWxpZGF0aW9uIiwicG9wdXBFZGl0aW5nIiwiaW5wdXRWYWx1ZXMiLCJlZGl0VXNlckluZm8iLCJzZXRJbnB1dFZhbHVlcyIsInBvcHVwQWRkaW5nIiwicGxhY2UiLCJhZGROZXdDYXJkIiwicmVuZGVyT25lSXRlbSIsInBvcHVwVXBkYXRpbmdBdmF0YXIiLCJ1cGRhdGVBdmF0YXIiXSwic291cmNlUm9vdCI6IiJ9